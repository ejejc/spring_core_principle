1. LOC - 제어의 역전
기존 : 클라이언트가 직접 구현 객체를 생성하고 실행까지 담당
AppConfig 등장 : 클라이언트는 자신의 로직을 실행하는 역활만 담당

즉, 프로그램의 제어의 흐름은 외부에서 관리하고 있다 -> 이것이 제어의 역전

프레임워크 vs 라이브러리
프레임워크
- 내가 작성한 코드를 제어하여 대신 실행
라이브러리
- 내가 작성한 코드가 직접 제어의 흐름을 담당

2. DI - 의존관계 주입
정적인 클래스 의존관계
- import문만 보고 알 수 있다.
동적인 클래스 의존관계
- 프로그램이 실행하는 시점에 결정하는 동적인 클래스 의존관계
- 실제 생성된 객체 인스턴스의 참조가 연결된 의존관계

즉, 실행 시점에 외부에서 실제 구현 객체를 생성하고 클라이언트에 전달해서 클라이언트와 서버의 실제 의존관계가 연결되는 것을 의존 관계 주입이라고 한다.
의존관계 주입을 사용하면 클라이언트 코드를 변경하지 않고, 클라이언트가 호출하는 대상의 타입 인스턴스를 변경할 수 있다.
의존관계 주입을 사용하면 정적인 클래스 다이어그램 수정 없이 동적인 객체 인스턴스 의존관계를 쉽게 변경할 수 있다.

3. IOC 컨테이너, DI 컨테이너
AppConfig 처럼 객체를 생성하고 관리하면서 의존관계를 연결해 주는 것을 IOC 컨테이너 또는 DI 컨테이너 라고 한다.
의존 관계 주입에 초점을 맞추어 DI 컨테이너라고 한다.

4. 스프링 컨테이너 - ApplicationContext
기존에는 AppConfig를 사용하여 직접 객체를 생성하여 의존성을 주입했지만
스프링 컨테이너는 @Configuration이 붙은 AppConfig를 설정 정보로 사용한다.
여기서 @Bean이라 적힌 메서드를 모두 호출해서 반환된 객체를 스프링 컨테이너에 등록한다.
이렇게 스프링 컨테이너에 등록된 객체를 스프링 빈이라고 한다.

메서드 명을 스프링 빈의 이름으로 사용한다.
이제부터는 스프링 컨테이너를 통해서 필요한 스프링 빈을 찾으면 된다.

ApplicationContext
= 인터페이스이다. 즉, 다형성 적용되어 있다.
= 스프링 컨테이너는 xml기반 또는 어노테이션 기반의 자바 설정 클래스로 만들 수 있다. (요즘은 거의 어노테이션!)
= new AnnotationConfigApplicationContext는 ApplicationContext의 구현체이다.

스프링은 빈을 생성하고 의존관계를 주입하는 단계가 나뉘어진다.
하지만 이렇게 자바코드를 사용하게 되면 빈응 등록하면서 생성자를 호출하여 의존 관계 주입도 한번에 처리된다.

